import kotlin.math.sqrt

fun main() {
    println("--- Encontre o Primeiro N√∫mero Primo ---")
    println("Este programa busca e exibe o primeiro n√∫mero primo no intervalo de 100 a 200.")

    encontrarPrimeiroPrimo()

    println("\n--- Fim da Busca ---")
    println("Demonstra√ß√£o eficaz de la√ßos aninhados e 'break' com r√≥tulo! üòä")
}

/**
 * Encontra e imprime o primeiro n√∫mero primo no intervalo de 100 a 200.
 * Utiliza la√ßos aninhados, otimiza√ß√£o da raiz quadrada e 'break' com r√≥tulo.
 */
fun encontrarPrimeiroPrimo() {
    var primeiroPrimoEncontrado: Int? = null // Vari√°vel para armazenar o primeiro primo

    // La√ßo externo para iterar sobre os n√∫meros no intervalo de 100 a 200
    // O r√≥tulo 'buscaDePrimos' permite quebrar este la√ßo de dentro do la√ßo interno
    buscaDePrimos@ for (numero in 100..200) {
        var isPrimo = true // Assume que o n√∫mero √© primo inicialmente

        // N√∫meros menores ou iguais a 1 n√£o s√£o primos
        if (numero <= 1) {
            isPrimo = false
            // Continua para o pr√≥ximo 'numero' no la√ßo externo
            // N√£o precisamos de continue aqui, pois o resto do c√≥digo depende de 'isPrimo'
        } else {
            // Otimiza√ß√£o: para verificar se um n√∫mero 'n' √© primo, basta testar divisores at√© a raiz quadrada de 'n'.
            // Se 'n' tiver um fator maior que sua raiz quadrada, ele tamb√©m deve ter um fator menor que sua raiz quadrada.
            val limiteDivisor = sqrt(numero.toDouble()).toInt()

            // La√ßo interno para testar divisores
            for (divisor in 2..limiteDivisor) {
                if (numero % divisor == 0) { // Se o n√∫mero for divis√≠vel por 'divisor'
                    isPrimo = false // N√£o √© primo
                    break // Quebra o la√ßo interno (n√£o √© preciso testar mais divisores)
                }
            }
        }

        // Se 'isPrimo' ainda for true, significa que encontramos o primeiro primo
        if (isPrimo) {
            primeiroPrimoEncontrado = numero
            println("O primeiro n√∫mero primo encontrado entre 100 e 200 √©: $primeiroPrimoEncontrado")
            break@buscaDePrimos // *** AQUI EST√Å O BREAK COM R√ìTULO ***
            // Quebra o la√ßo externo 'buscaDePrimos' e encerra a busca.
        }
    }

    if (primeiroPrimoEncontrado == null) {
        println("Nenhum n√∫mero primo foi encontrado no intervalo especificado.")
    }
}
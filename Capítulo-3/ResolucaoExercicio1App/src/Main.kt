fun main() {
    println("--- Validador de Senha Avan√ßado ---")
    println("Este programa solicita ao usu√°rio uma senha at√© que ela atenda a crit√©rios espec√≠ficos.")
    println("Digite 'sair' a qualquer momento para encerrar o programa.")

    validarSenhaAvancada()

    println("\n--- Fim do Validador de Senha ---")
    println("Obrigado por usar o validador, Edu! üòä")
}

/**
 * Fun√ß√£o para validar uma senha avan√ßada, solicitando ao usu√°rio que digite uma senha
 * at√© que ela atenda a certos crit√©rios ou que o usu√°rio digite "sair".
 *
 * Crit√©rios de valida√ß√£o:
 * - M√≠nimo de 8 caracteres.
 * - Deve conter pelo menos uma letra mai√∫scula.
 * - Deve conter pelo menos uma letra min√∫scula.
 * - Deve conter pelo menos um n√∫mero.
 */
fun validarSenhaAvancada() {
    var senhaValida = false
    var senha: String? // Vari√°vel para armazenar a senha digitada pelo usu√°rio

    println("\n--- Crit√©rios da Senha ---")
    println("- M√≠nimo de 8 caracteres")
    println("- Pelo menos uma letra mai√∫scula (A-Z)")
    println("- Pelo menos uma letra min√∫scula (a-z)")
    println("- Pelo menos um n√∫mero (0-9)")

    // O la√ßo do-while garante que a senha ser√° solicitada e validada pelo menos uma vez.
    do {
        print("\nPor favor, digite sua senha (ou 'sair' para encerrar): ")
        senha = readLine() // L√™ a entrada do usu√°rio do console

        // 1. Verificar se o usu√°rio quer sair
        if (senha.equals("sair", ignoreCase = true)) {
            println("Valida√ß√£o de senha encerrada pelo usu√°rio.")
            break // Sai imediatamente da fun√ß√£o `validarSenhaAvancada`
        }

        // Garante que a senha n√£o √© nula (caso o readLine() retorne null, o que √© raro em execu√ß√£o normal do console)
        if (senha == null) {
            println("‚ùå Erro na leitura. Nenhuma entrada recebida. Tente novamente.")
            senhaValida = false // Mant√©m o loop ativo
            continue // Pula para a pr√≥xima itera√ß√£o do do-while
        }

        // Assume que a senha √© v√°lida no in√≠cio de cada itera√ß√£o, e muda para false se alguma valida√ß√£o falhar.
        senhaValida = true
        val mensagensDeErro = mutableListOf<String>()

        // 2. Realizar as valida√ß√µes da senha
        // 2.1. Tamanho m√≠nimo
        if (senha.length < 8) {
            mensagensDeErro.add("A senha deve ter no m√≠nimo 8 caracteres.")
            senhaValida = false
        }

        // 2.2. Pelo menos uma letra mai√∫scula
        if (!senha.any { it.isUpperCase() }) {
            mensagensDeErro.add("A senha deve conter pelo menos uma letra mai√∫scula.")
            senhaValida = false
        }

        // 2.3. Pelo menos uma letra min√∫scula
        if (!senha.any { it.isLowerCase() }) {
            mensagensDeErro.add("A senha deve conter pelo menos uma letra min√∫scula.")
            senhaValida = false
        }

        // 2.4. Pelo menos um n√∫mero
        if (!senha.any { it.isDigit() }) {
            mensagensDeErro.add("A senha deve conter pelo menos um n√∫mero.")
            senhaValida = false
        }

        // Feedback para o usu√°rio
        if (!senhaValida) {
            println("‚ùå Senha inv√°lida! Por favor, corrija os seguintes pontos:")
            mensagensDeErro.forEach { println("- $it") }
            println("Tente novamente.")
        }

    } while (!senhaValida) // O loop continua enquanto a senha n√£o for v√°lida

    println("""
‚úÖ Senha validada com sucesso! Voc√™ escolheu a senha: "$senha".
    """.trimIndent()) // trimIndent() remove o espa√ßo extra causado pela indenta√ß√£o do c√≥digo
}